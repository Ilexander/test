<?php

namespace Tests\Unit\Repositories\ApiDoc;

use App\Http\Requests\Api\ApiDocs\ApiDocsAllRequest;
use App\Http\Requests\Api\ApiDocs\ApiDocsCreateRequest;
use App\Http\Requests\Api\ApiDocs\ApiDocsDeleteRequest;
use App\Http\Requests\Api\ApiDocs\ApiDocsInfoRequest;
use App\Http\Requests\Api\ApiDocs\ApiDocsUpdateRequest;
use App\Models\ApiDoc;
use App\Repositories\ApiDoc\ApiDocRepository;
use Illuminate\Foundation\Testing\DatabaseMigrations;
use Illuminate\Support\Str;
use Tests\TestCase;
use Tests\Factories\ApiDocFactory;

class ApiDocRepositoryTest extends TestCase
{
    use DatabaseMigrations;

    private ApiDoc $apiDoc;
    private ApiDocRepository $apiDocRepository;

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->apiDoc = new ApiDoc();
        $this->apiDocRepository = new ApiDocRepository($this->apiDoc);
    }

    /**
     * A basic unit test example.
     *
     * @return void
     */
    public function testList()
    {
        $apiDoc = ApiDocFactory::new()->create();

        $all = new ApiDocsAllRequest();

        $result = $this->apiDocRepository->list($all);

        /** @var ApiDoc $item */
        foreach ($result as $item) {
            $this->assertEquals($apiDoc->id, $item->id);
            $this->assertEquals($apiDoc->title, $item->title);
            $this->assertEquals($apiDoc->description, $item->description);
            $this->assertEquals($apiDoc->response, $item->response);
        }
    }

    public function testCreate()
    {
        $inputData = [
            'title' => Str::random(32),
            'description' => Str::random(32),
            'response' => Str::random(32)
        ];

        $create = new ApiDocsCreateRequest();
        $create->merge($inputData);


        /** @var ApiDoc $item */
        $item = $this->apiDocRepository->create($create);

        $this->assertEquals($inputData['title'], $item->title);
        $this->assertEquals($inputData['description'], $item->description);
        $this->assertEquals(json_encode($inputData['response']), $item->response);
    }

    public function testInfo()
    {
        $apiDoc = ApiDocFactory::new()->create();

        $info = new ApiDocsInfoRequest();
        $info->merge([
            "id" => $apiDoc->id
        ]);

        /** @var ApiDoc $result */
        $result = $this->apiDocRepository->info($info);

        $this->assertEquals($apiDoc->id, $result->id);
        $this->assertEquals($apiDoc->title, $result->title);
        $this->assertEquals($apiDoc->description, $result->description);
        $this->assertEquals($apiDoc->response, $result->response);

    }

    public function testUpdate()
    {
        $apiDoc = ApiDocFactory::new()->create();

        $info = new ApiDocsInfoRequest();
        $info->merge([
            "id" => $apiDoc->id
        ]);

        /** @var ApiDoc $result */
        $result = $this->apiDocRepository->info($info);

        $this->assertEquals($apiDoc->id, $result->id);
        $this->assertEquals($apiDoc->title, $result->title);
        $this->assertEquals($apiDoc->description, $result->description);
        $this->assertEquals($apiDoc->response, $result->response);

        $newTitle = Str::random(32);

        $update = new ApiDocsUpdateRequest();
        $update->merge([
            'id' => $apiDoc->id,
            'title' => $newTitle,
            'description' => $apiDoc->description,
            'response'  => json_decode($apiDoc->response)
        ]);
        $this->assertTrue($this->apiDocRepository->update($update));

        /** @var ApiDoc $result */
        $result = $this->apiDocRepository->info($info);

        $this->assertEquals($apiDoc->id, $result->id);
        $this->assertEquals($newTitle, $result->title);
        $this->assertEquals($apiDoc->description, $result->description);
        $this->assertEquals($apiDoc->response, $result->response);
    }

    public function testDelete()
    {
        $apiDoc = ApiDocFactory::new()->create();

        $info = new ApiDocsInfoRequest();
        $info->merge([
            "id" => $apiDoc->id
        ]);

        /** @var ApiDoc $result */
        $result = $this->apiDocRepository->info($info);

        $this->assertEquals($apiDoc->id, $result->id);
        $this->assertEquals($apiDoc->title, $result->title);
        $this->assertEquals($apiDoc->description, $result->description);
        $this->assertEquals($apiDoc->response, $result->response);

        $delete = new ApiDocsDeleteRequest();
        $delete->merge([
            "id" => $apiDoc->id
        ]);
        $this->assertTrue($this->apiDocRepository->delete($delete));

        $this->assertNull($this->apiDocRepository->info($info));
    }
}
